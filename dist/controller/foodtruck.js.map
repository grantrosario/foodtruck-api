{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","req","res","newFoodTruck","name","body","foodtype","avgcost","geometry","coordinates","lat","long","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","status","remove","_id","review","newReview","title","text","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport FoodTruck from '../model/foodtruck';\nimport Review from '../model/review';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  // CRUD - Create Read Update Delete\n\n  // '/v1/foodtruck/add' - Create\n  api.post('/add', authenticate, (req, res) => {\n    let newFoodTruck = new FoodTruck();\n    newFoodTruck.name = req.body.name;\n    newFoodTruck.foodtype = req.body.foodtype;\n    newFoodTruck.avgcost = req.body.avgcost;\n    newFoodTruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n    newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n\n    newFoodTruck.save(err => {\n      if (err) {\n        res.send(err);\n      }\n      res.json({ message: 'FoodTruck saved successfully' });\n    });\n  });\n\n  // '/v1/foodtruck' - Read\n  api.get('/', (req, res) => {\n    FoodTruck.find({}, (err, foodtrucks) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Read 1\n  api.get('/:id', (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtruck);\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Update\n  api.put('/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      foodtruck.name = req.body.name;\n      foodtruck.foodtype = req.body.foodtype;\n      newFoodTruck.avgcost = req.body.avgcost;\n      newFoodTruck.geometry.coordinates.lat = req.body.geometry.coordinates.lat;\n      newFoodTruck.geometry.coordinates.long = req.body.geometry.coordinates.long;\n      foodtruck.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json({ message: \"FoodTruck info updated\" });\n      });\n    });\n  });\n\n  // '/v1/foodtruck/:id' - Delete\n  api.delete('/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.status(500).send(err);\n        return;\n      }\n      if (foodtruck === null) {\n        res.status(404).send(\"FoodTruck not found\");\n        return;\n      }\n      FoodTruck.remove({\n        _id: req.params.id\n      }, (err, foodtruck) => {\n        if (err) {\n          res.status(500).send(err);\n          return;\n        }\n        Review.remove({\n          foodtruck: req.params.id\n        }, (err, review) => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({message: \"Food Truck and Reviews Successfully Removed\"});\n        });\n      });\n    });\n  });\n\n\n\n\n// add review for a specific foodtruck id\n// '/v1/foodtruck/reviews/add/:id'\n  api.post('/reviews/add/:id', authenticate, (req, res) => {\n    FoodTruck.findById(req.params.id, (err, foodtruck) => {\n      if (err) {\n        res.send(err);\n      }\n      let newReview = new Review();\n\n      newReview.title = req.body.title;\n      newReview.text = req.body.text;\n      newReview.foodtruck = foodtruck._id;\n      newReview.save((err, review) => {\n        if (err) {\n          res.send(err);\n        }\n        foodtruck.reviews.push(newReview);\n        foodtruck.save(err => {\n          if (err) {\n            res.send(err);\n          }\n          res.json({ message: 'Food truck review saved! '});\n        });\n      });\n    });\n  });\n\n  // get reviews for specific food truck id\n  // '/v1/foodtruck/reviews/:id'\n  api.get('/reviews/:id', (req, res) => {\n    Review.find({foodtruck: req.params.id}, (err, reviews) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(reviews);\n    });\n  });\n\n  // '/v1/foodtruck/foodtype/:foodtype' - Read 2\n  api.get('/foodtype/:foodtype', (req, res) => {\n    FoodTruck.find({foodtype: req.params.foodtype}, (err, foodtype) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtype);\n    });\n  });\n\nreturn api;\n}\n"]}